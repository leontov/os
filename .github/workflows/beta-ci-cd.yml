name: Beta CI/CD

on:
  push:
    branches:
      - beta
  workflow_dispatch:

concurrency:
  group: beta-ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint (Python & frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install Python linters
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff pyright

      - name: Ruff
        run: ruff check .

      - name: Pyright
        run: pyright

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: ESLint
        working-directory: frontend
        run: npm run lint

  tests:
    name: Tests (Python, CMake, frontend)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install Python test dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Pytest
        run: pytest -q

      - name: Install build toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-multilib g++-multilib

      - name: Configure CMake (Debug)
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo

      - name: Build C targets
        run: cmake --build build --config RelWithDebInfo --target all

      - name: CTest
        run: ctest --test-dir build --output-on-failure

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Vitest
        working-directory: frontend
        run: npm run test -- --runInBand

  build:
    name: Build artifacts
    runs-on: ubuntu-latest
    needs: tests
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    env:
      BUILD_DIR: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define image tag
        id: meta
        run: echo "tag=beta-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> "$GITHUB_OUTPUT"

      - name: Install build toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build nasm grub-pc-bin xorriso gcc-multilib

      - name: Configure CMake (Release)
        run: cmake -S . -B $BUILD_DIR -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build C targets
        run: cmake --build $BUILD_DIR --config Release --target all

      - name: Build ISO image
        run: ./scripts/build_iso.sh

      - name: Set up Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: latest

      - name: Build kolibri.wasm
        run: ./scripts/build_wasm.sh

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Build backend Docker image
        run: docker build -f backend/Dockerfile -t kolibri-backend:${{ steps.meta.outputs.tag }} .

      - name: Build frontend Docker image
        run: docker build -f frontend/Dockerfile -t kolibri-frontend:${{ steps.meta.outputs.tag }} .

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/iso artifacts/wasm artifacts/frontend artifacts/docker
          cp build/kolibri.iso artifacts/iso/
          sha256sum build/kolibri.iso > artifacts/iso/kolibri.iso.sha256
          cp build/wasm/kolibri.wasm artifacts/wasm/
          sha256sum build/wasm/kolibri.wasm > artifacts/wasm/kolibri.wasm.sha256
          if [ -f build/wasm/kolibri.wasm.txt ]; then
            cp build/wasm/kolibri.wasm.txt artifacts/wasm/
          fi
          tar -czf artifacts/frontend/frontend-dist.tar.gz -C frontend dist
          sha256sum artifacts/frontend/frontend-dist.tar.gz > artifacts/frontend/frontend-dist.tar.gz.sha256
          docker save kolibri-backend:${{ steps.meta.outputs.tag }} | gzip > artifacts/docker/kolibri-backend.tar.gz
          docker save kolibri-frontend:${{ steps.meta.outputs.tag }} | gzip > artifacts/docker/kolibri-frontend.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: beta-build-${{ github.run_id }}
          path: artifacts
          if-no-files-found: error

  deploy:
    name: Deploy to beta staging
    runs-on: ubuntu-latest
    needs:
      - build
    environment:
      name: beta-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: beta-build-${{ github.run_id }}
          path: artifacts

      - name: Restore Docker images
        run: |
          gunzip -c artifacts/docker/kolibri-backend.tar.gz | docker load
          gunzip -c artifacts/docker/kolibri-frontend.tar.gz | docker load

      - name: Make deployment script executable
        run: chmod +x scripts/deploy_linux.sh

      - name: Deploy containers
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          ./scripts/deploy_linux.sh --version "${IMAGE_TAG}" \
            --prefix "$PWD/beta-deploy" \
            --backend-image "kolibri-backend:${IMAGE_TAG}" \
            --frontend-image "kolibri-frontend:${IMAGE_TAG}" \
            --skip-pull

      - name: Validate containers
        run: |
          sleep 10
          docker ps
          docker logs kolibri-backend | tail -n 20 || true
          docker logs kolibri-frontend | tail -n 20 || true

      - name: Collect deployment summary
        run: |
          mkdir -p artifacts/deploy
          docker ps > artifacts/deploy/docker-ps.txt
          docker inspect kolibri-backend kolibri-frontend > artifacts/deploy/docker-inspect.json

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: beta-deploy-${{ github.run_id }}
          path: artifacts/deploy
